@page "/"
@using Microsoft.EntityFrameworkCore
@using OpenTracker.Components.Shared
@using OpenTracker.Data
@using OpenTracker.Data.Models
@using OpenTracker.Data.Services
@using System.Security.Claims
@inject Scryfall Scryfall
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager nav
@inject IJSRuntime JS


@rendermode InteractiveServer


<PageTitle>Home</PageTitle>





<div class="SessionContainer">
    <div class="SessionOptions">
        @if (ActiveUser is not null)
        {
            <button class="btn btn-primary" @onclick="CreateSession">New Session</button>
        }
        <hr />
        @if (UserSessions is not null)
        {
            <div class="SessionList">
                @*                 <ul>
                    @foreach (var session in UserSessions)
                    {
                        <li class="btn btn-primary" @onclick="() => ChangeSession(session)">@session.SessionName</li>
                    }
                </ul> *@
                @*<InputSelect class="form-select" @bind-Value="SelectedSessionId" @onchange="HandleChange"> @*ChangeSession(SelectedSessionId)*@
                <InputSelect class="form-select" Value="SelectedSessionId" ValueExpression="@(() => SelectedSessionId)" ValueChanged="@((e) => HandleChange(e))" TValue="Guid">
                    <option disabled hidden selected value="@Guid.Empty">Select Session...</option>
                    @foreach (var session in UserSessions)
                    {
                        <option value="@session.SessionId">@session.SessionName</option>
                    }
                </InputSelect>
            </div>
        }
    </div>

    <br />

    @if (ActiveSession is not null){
        <div class="SessionHeader">
            <h3>@ActiveSession.SessionName | Total Price: $@ActiveSession.TotalPrice | Unique Cards: @CardsInSession.Count </h3>
            <div class="SessionHeaderIconContainer">
                <i class="fa-regular fa-trash-can SessionDeleteIcon" @onclick="DeleteSession"></i>
                <a href="/report/{@ActiveSession.SessionId}" target="_blank"><i class="fa-regular fa-file-lines SessionReportIcon" title="Generate Report"></i></a>
                <i class="fa-solid fa-gear SessionSettingIcon" @onclick="OpenSessionSettings" title="Settings"></i>
            </div>
        </div>
        <div>
            <form @onsubmit="SearchCards" @onsubmit:preventDefault="true" class="MainSearchContainer">
                <div class="InputContainer">
                    @if (SetNumberMode == false)
                    {
                        <InputText class="form-control" @bind-Value="TextInput"></InputText>
                    }
                    else
                    {
                        <InputNumber class="form-control" @bind-Value="NumberInput"></InputNumber>
                    }
                </div>
            </form>

        </div>
        <hr />

        <div class="subMenu">
            <div class="sortButtons">
                <button @onclick='() => SortSession("Price")' class="btn @(currentSortProperty == "Price" ? "btn-primary" : "btn-secondary")">
                    Price $ (@(currentSortProperty == "Price" ? (isAscending ? "▲" : "▼") : "▼"))
                </button>

                <button @onclick='() => SortSession("DateAdded")' class="btn @(currentSortProperty == "DateAdded" ? "btn-primary" : "btn-secondary")">
                    Date Added (@(currentSortProperty == "DateAdded" ? (isAscending ? "▲" : "▼") : "▼"))
                </button>

                <button @onclick='() => SortSession("LastUpdated")' class="btn @(currentSortProperty == "LastUpdated" ? "btn-primary" : "btn-secondary")">
                    Last Updated (@(currentSortProperty == "LastUpdated" ? (isAscending ? "▲" : "▼") : "▼"))
                </button>

                <button @onclick='() => SortSession("Name")' class="btn @(currentSortProperty == "Name" ? "btn-primary" : "btn-secondary")">
                    Name (@(currentSortProperty == "Name" ? (isAscending ? "▲" : "▼") : "▼"))
                </button>

                <button @onclick='() => SortSession("SetNumber")' class="btn @(currentSortProperty == "SetNumber" ? "btn-primary" : "btn-secondary")">
                    Set Number (@(currentSortProperty == "SetNumber" ? (isAscending ? "▲" : "▼") : "▼"))
                </button>
            </div>
            <div class="searchBarContainer">
                @*  <InputText class="form-control" Value="SearchInput" ValueExpression="@(() => SearchInput)" ValueChanged="@((e) => HandleSearch(e))" TValue="String" placeholder="Search for Card"/> *@
                <InputText class="form-control" @bind-Value="SearchInput" @oninput="HandleSearch" placeholder="Search for Card"></InputText>
            </div>
            <div class="setMenu">
                <div class="setOptions">
                    <InputText class="form-control" @bind-Value="SetInput" placeholder="Set Trigram" maxlength="3"></InputText>
                </div>
                <div class="setModeCheckContainer">
                    <label for="setModeCheck">Set Mode: </label>
                    <InputCheckbox class="form-check" @bind-Value="SetNumberMode" name="setModeCheck" id="setModeCheck"></InputCheckbox>
                </div>
            </div>
        </div>
        <hr />
        <div class="CardContainer">
            @if(CardsInSession is not null){
                if(isFiltered && FilteredCardsInSession is not null){
                    @foreach (var card in FilteredCardsInSession)
                    {
                        <div class="card" @onclick="() => AddCardToSession(card.Key)" @oncontextmenu="(e) => SubtractCardToSession(card.Key, e)" @oncontextmenu:preventDefault="true" style="cursor: pointer">
                            <div class="CardHeader">
                                <h4>@card.Key.Name</h4>
                            </div>
                            <div class="CardBody">
                                <span class="CardDetails">
                                    <div class="cardPrice">
                                        $@card.Key.Price
                                    </div>
                                    <div class="cardQuantity">
                                        Qty:@card.Value
                                    </div>
                                </span>
                                <img src="@card.Key.ImageURL" alt="@card.Key.Name" style="border-radius: 5px" />
                                <span class="CardDetails">
                                    <div class="CardSet">
                                        @card.Key.SetName.ToUpper() - @card.Key.SetNumber
                                    </div>
                                    <div class="CardVersions">
                                        <span class="btn btn-outline-dark" @onclick="() => GetAllVersionsOfCard(card.Key)" @onclick:stopPropagation="true">?</span>
                                    </div>
                                </span>
                            </div>
                        </div>
                    }
                }
                else{
                    @foreach (var card in CardsInSession)
                    {
                        <div class="card" @onclick="() => AddCardToSession(card.Key)" @oncontextmenu="(e) => SubtractCardToSession(card.Key, e)" @oncontextmenu:preventDefault="true" style="cursor: pointer">
                            <div class="CardHeader">
                                <h4>@card.Key.Name</h4>
                            </div>
                            <div class="CardBody">
                                <span class="CardDetails">
                                    <div class="cardPrice">
                                        $@card.Key.Price
                                    </div>
                                    <div class="cardQuantity">
                                        Qty:@card.Value
                                    </div>
                                </span>
                                <img src="@card.Key.ImageURL" alt="@card.Key.Name" style="border-radius: 5px" />
                                <span class="CardDetails">
                                    <div class="CardSet">
                                        @card.Key.SetName.ToUpper() - @card.Key.SetNumber
                                    </div>
                                    <div class="CardVersions">
                                        <span class="btn btn-outline-dark" @onclick="() => GetAllVersionsOfCard(card.Key)" @onclick:stopPropagation="true">?</span>
                                    </div>
                                </span>
                            </div>
                        </div>
                    }
                }

            }
        </div>

    }
</div>

@* <div class="CardViewer">
    @if(ReturnedCards is not null){
        @foreach (var card in ReturnedCards)
        {
            <div class="card">
                <h6>@card.Name - $@card.Price</h6>
                <a target="_blank" href="@card.CardURL">
                    <img src="@card.ImageURL" alt="@card.Name" />
                </a>
                <button class="btn btn-primary" @onclick="() => AddCardToSession(card)">Add</button>
            </div>
        }
    }
</div> *@

<Modal @ref="modal" Title="@ModalTitle" Data="@ReturnedCards" OnAction="AddCardToSession" OnClose="HandleModalClose" />

@code {


    List<Card> ReturnedCards { get; set; }
    Dictionary<Card, int> CardsInSession { get; set; }
    Dictionary<Card, int> FilteredCardsInSession { get; set; }

    List<Session> UserSessions { get; set; }
    public bool SessionActive { get; set; }
    public bool IsArtSearching { get; set; } = false;
    private Card SelectedCard { get; set; }
    public Session ActiveSession { get; set; }
    private ApplicationUser ActiveUser { get; set; }
    private Guid SelectedSessionId { get; set; }

    private string currentSortProperty = "DateAdded";

    private bool isAscending = true;
    private bool isFiltered = false;


    private Modal? modal;
    private string ModalTitle;


    //Search related variables
    private string SearchInput { get; set; } = "";
    public string TextInput { get; set; }
    private int NumberInput { get; set; }
    private string SetInput { get; set; } = "";
    private bool SetNumberMode { get; set; } = false;

    // private bool IsSingleClick { get; set; } = false;
    // private string LastAction = "None";

    /// <summary>
    /// A list of all CardSessions for the current ActiveSession
    /// </summary>
    List<CardSession> CardSessionUnion = new List<CardSession>();

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            using var context = await DbContextFactory.CreateDbContextAsync();
            ActiveUser = await context.Users.Where(u => u.UserName == user.Identity.Name).FirstOrDefaultAsync();

            if(ActiveUser is not null){
                //TODO: Find most recent session and check if it has a closed date, if not then set it as ActiveSession
                UserSessions = await context.Sessions.Where(u => u.SessionOwnerId == ActiveUser.Id).OrderByDescending(s => s.LastUpdated).ToListAsync();
                // if (UserSessions is not null)
                // {
                //     bool MessagePrompt;

                //     MessagePrompt = await JS.InvokeAsync<bool>("confirm", "Would you like load the previous session?");

                //     if (MessagePrompt)
                //     {
                //         ActiveSession = UserSessions.Last();
                //     }

                // }

            }

        }


        SessionActive = false;
        ReturnedCards = new List<Card>();

    }

    private async void HandleChange(Guid session)
    {

        using var context = await DbContextFactory.CreateDbContextAsync();
        SelectedSessionId = session;
        var NewSession = await context.Sessions.Where(s => s.SessionId == session).FirstOrDefaultAsync();
        ChangeSession(NewSession);

    }

    private async void HandleSearch(ChangeEventArgs e)
    {
        var search = e.Value?.ToString() ?? "";
        if(search.Length < 3){
            isFiltered = false;
            return;
        }

        //var query = $"%{search}%";
        FilteredCardsInSession = CardsInSession.Where(c => c.Key.Name.Contains(search, StringComparison.OrdinalIgnoreCase)).ToDictionary(x => x.Key, x => x.Value);

        if(FilteredCardsInSession.Count > 0){
            isFiltered = true;
        }

    }

    private Task HandleModalClose()
    {
        Console.WriteLine("Modal closed.");
        return Task.CompletedTask;
    }

    private async Task SearchCards()
    {
        var Query = "";
        if (TextInput == "" && NumberInput == 0)
        {
            await JS.InvokeVoidAsync("alert", "Please enter a valid search");
            return; 
        }

        if(SetNumberMode){
            if (SetInput == "")
            {
                await JS.InvokeVoidAsync("alert", "Please enter a set number");
                return;
            }
            else{
                Query = "cn%3A" + NumberInput;
            }

        }
        else
        {
            Query = "name%3A" + TextInput;
        }


        ReturnedCards = await Scryfall.SearchForCardAsync(Query, "", SetInput == "" ? "" : SetInput);

        if(ReturnedCards.Count == 0){
            await JS.InvokeVoidAsync("alert", "No cards with that name found");
        }
        else if(ReturnedCards.Count == 1){
            AddCardToSession(ReturnedCards.First());
        }
        else{
            ModalTitle = $"Keyword search: {TextInput}";
            modal?.ShowModal();
        }

        //TODO: Clear the search bar

        TextInput = "";
        NumberInput = 0;
        StateHasChanged();

    }

    private async Task GetAllVersionsOfCard(Card Card){

        ReturnedCards = await Scryfall.SearchForCardAsync(Card.Name, "@@", SetInput == "" ? "" : SetInput);

        if (ReturnedCards.Count == 0)
        {
            await JS.InvokeVoidAsync("alert", "No cards with that name found");
        }
        else if (ReturnedCards.Count == 1)
        {
            await JS.InvokeVoidAsync("alert", "No other versions of card");
        }
        else
        {
            ModalTitle = $"Artwork search: {Card.Name}";
            modal?.ShowModal();
            SelectedCard = Card;
        }
    }




    private async void AddCardToSession(Card card)
    {
        // Used for if I decide to add a double click feature to the cards as AddCardToSession is the default onclick event and I don't need it activating twice
        //IsSingleClick = true;
        //await Task.Delay(200); // Delay to determine if a double-click follows
        //
        // if (IsSingleClick)
        // {
        //      LastAction = "Single Click";
        //      IsSingleClick = false;
        // }

        using var context = await DbContextFactory.CreateDbContextAsync();


        var DictTemp = CardsInSession.Where(c => c.Key.CardId == card.CardId).FirstOrDefault();

        if (DictTemp.Key is not null)
        {
            if (SelectedCard is not null)
            {
                //Grab CardSession that contains the card that had the button pressed on

                //Session of card getting replaced
                var selectedSession = await context.CardSessions.Where(c => c.CardId == SelectedCard.CardId && c.SessionId == ActiveSession.SessionId).Include(c => c.Card).Include(s => s.Session).FirstOrDefaultAsync();

                //Session of card staying
                var existingSession = await context.CardSessions.Where(c => c.CardId == card.CardId && c.SessionId == ActiveSession.SessionId).Include(c => c.Card).Include(s => s.Session).FirstOrDefaultAsync();

                //Update session total by removing all old quantities of old card and adding the old quantities of new card
                existingSession.Session.TotalPrice -= (SelectedCard.Price.Value * selectedSession.CardQuantity);
                existingSession.Session.TotalPrice += (card.Price.Value * selectedSession.CardQuantity);
                existingSession.LastUpdated = DateTime.Now;

                ActiveSession.TotalPrice = existingSession.Session.TotalPrice;
                ActiveSession.LastUpdated = DateTime.Now;

                //update new quantities by adding old quantities to new session
                existingSession.CardQuantity += selectedSession.CardQuantity;
                //CardsInSession[card] += selectedSession.CardQuantity;
                CardsInSession.Remove(selectedSession.Card);
                CardsInSession[DictTemp.Key] = existingSession.CardQuantity;

                //remove old session
                CardSessionUnion.Remove(selectedSession);
                CardsInSession.Remove(SelectedCard);
                context.Remove(selectedSession);


                //Update local CardSession holder
                var cardSession = CardSessionUnion.Where(c => c.Card.CardId == card.CardId).FirstOrDefault();
                cardSession.CardQuantity = existingSession.CardQuantity;

                context.Update(existingSession);
            }
            else{
                var cardSession = CardSessionUnion.Where(c => c.Card.CardId == card.CardId).FirstOrDefault();
                ActiveSession.TotalPrice += card.Price.Value >= 0 ? card.Price.Value : 0;
                ActiveSession.LastUpdated = DateTime.Now;

                cardSession.CardQuantity += 1;
                cardSession.LastUpdated = DateTime.Now;

                CardsInSession.Remove(DictTemp.Key);
                CardsInSession[DictTemp.Key] = cardSession.CardQuantity;

                context.Update(cardSession);
            }
        }
        else
        {
            if (SelectedCard is not null)
            {

                //Grab CardSession that contains the card that had the button pressed on
                var selectedSession = await context.CardSessions.Where(c => c.CardId == SelectedCard.CardId && c.SessionId == ActiveSession.SessionId).Include(c => c.Card).FirstOrDefaultAsync();



                //Update session locally by swapping the card value in the session
                var index = CardSessionUnion.FindIndex(c => c.CardId == SelectedCard.CardId);

                CardSessionUnion[index].CardId = card.CardId;
                CardSessionUnion[index].Card = card;


                //Update card dictionary
                var valueHolder = CardsInSession[SelectedCard];
                CardsInSession.Remove(SelectedCard);
                CardsInSession[card] = valueHolder;


                //Swap which card is in the session
                selectedSession.Card = card;
                selectedSession.LastUpdated = DateTime.Now;

                //Update session total price
                var temp = ActiveSession.TotalPrice;
                temp -= (SelectedCard.Price.Value * selectedSession.CardQuantity);
                temp += (card.Price.Value * selectedSession.CardQuantity);

                ActiveSession.TotalPrice = temp;
                ActiveSession.LastUpdated = DateTime.Now;

                selectedSession.LastUpdated = DateTime.Now;
                context.Update(selectedSession);
            }
            else{
                CardSession NewCardSession = new CardSession()
                    {
                        CardId = card.CardId,
                        CardQuantity = 1,
                        SessionId = ActiveSession.SessionId,
                        LastUpdated = DateTime.Now,
                        DateCreated = DateTime.Now
                    };


                ActiveSession.TotalPrice += card.Price.Value >= 0 ? card.Price.Value : 0;
                ActiveSession.LastUpdated = DateTime.Now;   
                context.CardSessions.Add(NewCardSession);

                NewCardSession.Card = card;

                CardSessionUnion.Add(NewCardSession);
                CardsInSession.Add(card, 1);

            }



        }

        context.Update(ActiveSession);
        SelectedCard = null;
        await context.SaveChangesAsync();
        ReturnedCards = null;
        StateHasChanged();


    }

    private async void SubtractCardToSession(Card card, MouseEventArgs e){


        //await JS.InvokeVoidAsync("window.preventContextMenu", e);
        int quantity = 0;
        using var context = await DbContextFactory.CreateDbContextAsync();
        if (CardsInSession.TryGetValue(card, out quantity))
        {

            var cardSession = CardSessionUnion.Where(c => c.Card.CardId == card.CardId).FirstOrDefault();
            if(quantity <= 1){
                bool confirm;

                confirm = await JS.InvokeAsync<bool>("confirm", "This will remove the card, are you sure?");
                if(!confirm){
                    return;
                }
                context.CardSessions.Remove(cardSession);
                CardSessionUnion.Remove(cardSession);
                CardsInSession.Remove(cardSession.Card);
            }
            else{
                cardSession.CardQuantity -= 1;
                CardsInSession[card] -= 1;
                context.Update(cardSession);
            }
            ActiveSession.TotalPrice -= card.Price.Value >= 0 ? card.Price.Value : 0;
            context.Update(ActiveSession);
            await context.SaveChangesAsync();
            StateHasChanged();
        }

    }

    private async void CreateSession()
    {
        if(ActiveSession is not null){
            //TODO: Popup warning that this will close a previous session but that the user can view previous sessions from their profile
        }
        else{
            using var context = await DbContextFactory.CreateDbContextAsync();
            string SessionName = "";

            SessionName = await JS.InvokeAsync<String>("prompt", "Would you like to add a name to the new session? \n(Leave blank for default)");

            if(SessionName is null){
                //TODO: Cancel out of function
                return;
            }

            var NewSession = new Session
                {
                    SessionOwnerId = ActiveUser.Id,
                    SessionName = SessionName != "" ? SessionName : $"{DateTime.Now} Session",
                    SessionStarted = DateTime.Now,
                    LastUpdated = DateTime.Now
                };

            context.Sessions.Add(NewSession);
            await context.SaveChangesAsync();
            //TODO: Figure out if I want to piggy back off of ActiveSession to store the current session. Probably do, not many reasons not to but...
            UserSessions.Add(NewSession);
            ChangeSession(NewSession);
            SelectedSessionId = NewSession.SessionId;
            StateHasChanged();
        }
    }

    private async void DeleteSession(){
        if (ActiveSession is not null)
        {
            bool DeleteSession = false;

            DeleteSession = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this session?");

            if(DeleteSession){
                using var context = await DbContextFactory.CreateDbContextAsync();
                var sessiontodelete = UserSessions.FirstOrDefault(x => x.SessionId == ActiveSession.SessionId);

                if(sessiontodelete is not null){
                    UserSessions.Remove(sessiontodelete);

                }

                context.Remove(ActiveSession);

                await context.SaveChangesAsync();

                ActiveSession = null;
                SelectedSessionId = Guid.Empty;

                StateHasChanged();
            }
        }
    }

    private async void OpenSessionSettings(){
        using var context = await DbContextFactory.CreateDbContextAsync();
        //For now this is all the settings but there can/will be more
        var sessionset = SetInput == "" ? "" : SetInput;

        sessionset = await JS.InvokeAsync<String>("prompt", "Default Set for Session", sessionset);

        if (sessionset is null || sessionset == "")
        {
            return;
        }

        while(sessionset.Length != 3){
            sessionset = await JS.InvokeAsync<String>("prompt", "Sets must use 3 letter format (i.e. ONE)", sessionset);

            if (sessionset is null || sessionset == "")
            {
                return;
            }
        }

        SetInput = sessionset;

        ActiveSession.SavedSessionSet = sessionset;

        context.Update(ActiveSession);

        StateHasChanged();
    }


    private async void ChangeSession(Session session)
    {
        if(session is null){
            nav.NavigateTo(nav.Uri, forceLoad: true);
            return;
        }
        
        using var context = await DbContextFactory.CreateDbContextAsync();

        if(ActiveSession is not null && ActiveSession.SessionId == session.SessionId){
            ActiveSession = null;
            return;
        }
        ActiveSession = session;

        try{
            if (ActiveSession.SavedSessionSet is not null && ActiveSession.SavedSessionSet != "")
            {
                SetInput = ActiveSession.SavedSessionSet;
            }
            else
            {
                SetInput = "";
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "Womp womp? {ex.Message}");
            nav.NavigateTo(nav.Uri, forceLoad: true);
            return;
        }

        CardSessionUnion = await context.CardSessions.Where(s => s.SessionId == session.SessionId).Include(c => c.Card).ToListAsync();
        CardsInSession = new Dictionary<Card, int>();
        foreach (var card in CardSessionUnion)
        {
            CardsInSession.Add(card.Card, card.CardQuantity);
        }

    }

    private async void SortSession(String SortType){
        var tempDict = CardSessionUnion.ToDictionary(x => x.Card, x => x);

        if (SortType != currentSortProperty)
        {
            currentSortProperty = SortType;
            isAscending = false;
        }
        else{
            isAscending = !isAscending;
        }
        switch(SortType){
            case "Price":
                currentSortProperty = "Price";
                SimpleSort();
                return;
            case "Name":
                currentSortProperty = "Name";
                SimpleSort();
                return;
            case "SetNumber":
                currentSortProperty = "SetNumber";
                if (isAscending)
                {
                    CardsInSession = CardsInSession.OrderBy(x => x.Key.SetName).ThenBy(y => y.Key.SetNumber).ToDictionary(x => x.Key, x => x.Value);
                }
                else
                {
                    CardsInSession = CardsInSession.OrderBy(x => x.Key.SetName).ThenByDescending(y => y.Key.SetNumber).ToDictionary(x => x.Key, x => x.Value);
                }
                return;
            case "DateAdded":
                currentSortProperty = "DateAdded";

                break;
            case "LastUpdated":
                currentSortProperty = "LastUpdated";
                break;
        }

        CardsInSession = isAscending ? CardsInSession.OrderBy(x => GetSortValue(tempDict[x.Key], currentSortProperty)).ToDictionary(x => x.Key, x => x.Value) : CardsInSession.OrderByDescending(x => GetSortValue(tempDict[x.Key], currentSortProperty)).ToDictionary(x => x.Key, x => x.Value);
    }

    /// <summary>
    /// A function that dynamically grabs a value from an object based on a string property name
    /// </summary>
    /// <param name="obj">Current Card</param>
    /// <param name="propertyName"> Property Name to return value of</param>
    /// <returns></returns>
    public object? GetPropertyValue(object obj, string propertyName)
    {
        return obj?.GetType().GetProperty(propertyName)?.GetValue(obj);
    }

    /// <summary>
    /// A function that simply sorts based on a singe layer deep property (i.e. Price and Name)
    /// </summary>
    public void SimpleSort(){
        if (isAscending)
        {
            CardsInSession = CardsInSession.OrderBy(x => GetPropertyValue(x.Key, currentSortProperty)).ToDictionary(x => x.Key, x => x.Value);
        }
        else
        {
            CardsInSession = CardsInSession.OrderByDescending(x => GetPropertyValue(x.Key, currentSortProperty)).ToDictionary(x => x.Key, x => x.Value);
        }
    }

    private object GetSortValue(CardSession cardSession, string sortProperty)
    {
        return sortProperty switch
        {
            "LastUpdated" => cardSession.LastUpdated,
            "DateAdded" => cardSession.DateCreated,
            _ => cardSession.DateCreated // Default case
        };
    }

    // private async void DoubleClickFunction(string cardURL){
    //     //TODO: Change this to do something like show alternate versions of a card in the session

    //     //this goes on the card -------------> @ondblclick="() => DoubleClickFunction(card.Key.CardURL)"
    //     IsSingleClick = false; // Cancel single-click behavior
    //     LastAction = "Double Click";
    //     await JS.InvokeVoidAsync("open", cardURL, "_blank");
    // }
}