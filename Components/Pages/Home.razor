@page "/"
@using Microsoft.EntityFrameworkCore
@using OpenTracker.Components.Shared
@using OpenTracker.Data
@using OpenTracker.Data.Models
@using OpenTracker.Data.Services
@using System.Security.Claims
@inject Scryfall Scryfall
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager nav
@inject IJSRuntime JS


@rendermode InteractiveServer


<PageTitle>Home</PageTitle>





<div class="SessionContainer">
    <div class="SessionOptions">
        @if (ActiveUser is not null)
        {
            <button class="btn btn-primary" @onclick="CreateSession">New Session</button>

            @if (ActiveSession is not null)
            {
                <a href="/report/{@ActiveSession.SessionId}" class="btn btn-primary" target="_blank">Generate Report</a>
                <button class="btn btn-danger" @onclick="DeleteSession">Delete Session</button>
            }
        }
        <br />
        @if (UserSessions is not null)
        {
            <div class="SessionList">
                <ul>
                    @foreach (var session in UserSessions)
                    {
                        <li class="btn btn-primary" @onclick="() => ChangeSession(session)">@session.SessionName</li>
                    }
                </ul>

            </div>
        }
    </div>


    @if (ActiveSession is not null){
        <h3>@ActiveSession.SessionName - $@ActiveSession.TotalPrice</h3>
        <div>
            <InputText class="form-control" @bind-Value="TextInput"></InputText>
            <button @onclick="SearchCards">Search</button>
        </div>
        <div class="CardContainer" style="display: flex; flex-wrap: wrap; gap: 10px">
            @if(CardsInSession is not null){
                @foreach (var card in CardsInSession)
                {
                    <div class="card" @onclick="() => AddCardToSession(card.Key)" @oncontextmenu="(e) => SubtractCardToSession(card.Key, e)" @oncontextmenu:preventDefault="true">
                        <h5>@card.Key.Name - $@card.Key.Price</h5>
                        <img src="@card.Key.ImageURL" alt="@card.Key.Name" />
                        <div class="cardQuantity" style="display: flex; flex-wrap: wrap; gap: 10px">
                            @* <button class="btn btn-danger" @onclick="() => SubtractCardToSession(card.Key)">-</button> *@
                            <h6>@card.Value</h6>
                            @* <button class="btn btn-success" @onclick="() => AddCardToSession(card.Key)">+</button> *@
                        </div>
                    </div>
                }
            }
        </div>

    }
</div>

@* <div class="CardViewer">
    @if(ReturnedCards is not null){
        @foreach (var card in ReturnedCards)
        {
            <div class="card">
                <h6>@card.Name - $@card.Price</h6>
                <a target="_blank" href="@card.CardURL">
                    <img src="@card.ImageURL" alt="@card.Name" />
                </a>
                <button class="btn btn-primary" @onclick="() => AddCardToSession(card)">Add</button>
            </div>
        }
    }
</div> *@

<Modal @ref="modal" Title="@ModalTitle" Data="@ReturnedCards" OnAction="AddCardToSession" OnClose="HandleModalClose" />

@code {
    public string TextInput { get; set; }
    List<Card> ReturnedCards { get; set; }
    Dictionary<Card, int> CardsInSession { get; set; }
    List<Session> UserSessions { get; set; }
    public bool SessionActive { get; set; }
    public Session ActiveSession { get; set; }
    private ApplicationUser ActiveUser { get; set; }

    private Modal? modal;
    private string ModalTitle;

    // private bool IsSingleClick { get; set; } = false;
    // private string LastAction = "None";

    /// <summary>
    /// A list of all CardSessions for the current ActiveSession
    /// </summary>
    List<CardSession> CardSessionUnion = new List<CardSession>();

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            using var context = await DbContextFactory.CreateDbContextAsync();
            ActiveUser = await context.Users.Where(u => u.UserName == user.Identity.Name).FirstOrDefaultAsync();

            if(ActiveUser is not null){
                //TODO: Find most recent session and check if it has a closed date, if not then set it as ActiveSession
                UserSessions = await context.Sessions.Where(u => u.SessionOwnerId == ActiveUser.Id).OrderBy(s => s.LastUpdated).ToListAsync();
                // if (UserSessions is not null)
                // {
                //     bool MessagePrompt;

                //     MessagePrompt = await JS.InvokeAsync<bool>("confirm", "Would you like load the previous session?");

                //     if (MessagePrompt)
                //     {
                //         ActiveSession = UserSessions.Last();
                //     }

                // }

            }

        }


        SessionActive = false;
        ReturnedCards = new List<Card>();

    }

    private async Task SearchCards()
    {
        if (TextInput == "")
        {
            await JS.InvokeVoidAsync("alert", "Please enter a valid search");
            return; 
        }


        ReturnedCards = await Scryfall.SearchForCardAsync(TextInput);

        if(ReturnedCards.Count == 0){
            await JS.InvokeVoidAsync("alert", "No cards with that name found");
        }
        else if(ReturnedCards.Count == 1){
            AddCardToSession(ReturnedCards.First());
        }
        else{
            ModalTitle = $"Keyword search: {TextInput}";
            modal?.ShowModal();
        }

        //TODO: Clear the search bar

        TextInput = "";
        StateHasChanged();

    }

    private Task HandleModalClose()
    {
        Console.WriteLine("Modal closed.");
        return Task.CompletedTask;
    }


    private async void AddCardToSession(Card card)
    {
        // Used for if I decide to add a double click feature to the cards as AddCardToSession is the default onclick event and I don't need it activating twice
        //IsSingleClick = true;
        //await Task.Delay(200); // Delay to determine if a double-click follows
        //
        // if (IsSingleClick)
        // {
        //      LastAction = "Single Click";
        //      IsSingleClick = false;
        // }
        using var context = await DbContextFactory.CreateDbContextAsync();

        int quantity = 0;
        if (CardsInSession.TryGetValue(card, out quantity))
        {
            var cardSession = CardSessionUnion.Where(c => c.Card.CardId == card.CardId).FirstOrDefault();
            ActiveSession.TotalPrice += card.Price.Value >= 0 ? card.Price.Value : 0;

            cardSession.CardQuantity += 1;

            CardsInSession[card] += 1;

            context.Update(cardSession);
            context.Update(ActiveSession);
        }
        else
        {
            CardSession NewCardSession = new CardSession()
                {
                    CardId = card.CardId,
                    CardQuantity = 1,
                    SessionId = ActiveSession.SessionId
                };


            ActiveSession.TotalPrice += card.Price.Value >= 0 ? card.Price.Value : 0;
            context.Update(ActiveSession);
            context.CardSessions.Add(NewCardSession);

            NewCardSession.Card = card;

            CardSessionUnion.Add(NewCardSession);
            CardsInSession.Add(card, 1);
        }

        await context.SaveChangesAsync();
        ReturnedCards = null;
        StateHasChanged();


    }

    private async void SubtractCardToSession(Card card, MouseEventArgs e){


        //await JS.InvokeVoidAsync("window.preventContextMenu", e);
        int quantity = 0;
        using var context = await DbContextFactory.CreateDbContextAsync();
        if (CardsInSession.TryGetValue(card, out quantity))
        {
            
            var cardSession = CardSessionUnion.Where(c => c.Card.CardId == card.CardId).FirstOrDefault();
            if(quantity <= 1){
                bool confirm;

                confirm = await JS.InvokeAsync<bool>("confirm", "This will remove the card, are you sure?");
                if(!confirm){
                    return;
                }
                context.CardSessions.Remove(cardSession);
                CardSessionUnion.Remove(cardSession);
                CardsInSession.Remove(cardSession.Card);
            }
            else{
                cardSession.CardQuantity -= 1;
                CardsInSession[card] -= 1;
                context.Update(cardSession);
            }
            ActiveSession.TotalPrice -= card.Price.Value >= 0 ? card.Price.Value : 0;
            context.Update(ActiveSession);
            await context.SaveChangesAsync();
            StateHasChanged();
        }

    }

    private async void CreateSession()
    {
        if(ActiveSession is not null){
            //TODO: Popup warning that this will close a previous session but that the user can view previous sessions from their profile
        }
        else{
            using var context = await DbContextFactory.CreateDbContextAsync();
            string SessionName = "";

            SessionName = await JS.InvokeAsync<String>("prompt", "Would you like to add a name to the new session? \n(Leave blank for default)");

            if(SessionName is null){
                //TODO: Cancel out of function
                return;
            }

            var NewSession = new Session
                {
                    SessionOwnerId = ActiveUser.Id,
                    SessionName = SessionName != "" ? SessionName : $"{DateTime.Now} Session",
                    SessionStarted = DateTime.Now,
                    LastUpdated = DateTime.Now
                };

            context.Sessions.Add(NewSession);
            await context.SaveChangesAsync();
            //TODO: Figure out if I want to piggy back off of ActiveSession to store the current session. Probably do, not many reasons not to but...
            UserSessions.Add(NewSession);
            ChangeSession(NewSession);

            StateHasChanged();
        }
    }

    private async void DeleteSession(){
        if (ActiveSession is not null)
        {
            bool DeleteSession = false;

            DeleteSession = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this session?");

            if(DeleteSession){
                using var context = await DbContextFactory.CreateDbContextAsync();

                UserSessions.Remove(ActiveSession);

                context.Remove(ActiveSession);

                await context.SaveChangesAsync();

                ActiveSession = null;

                StateHasChanged();
            }
        }
    }

    private async void ChangeSession(Session session)
    {
        using var context = await DbContextFactory.CreateDbContextAsync();
        if(ActiveSession is not null && ActiveSession.SessionId == session.SessionId){
            ActiveSession = null;
            return;
        }
        ActiveSession = session;

        CardSessionUnion = await context.CardSessions.Where(s => s.SessionId == session.SessionId).Include(c => c.Card).ToListAsync();
        CardsInSession = new Dictionary<Card, int>();
        foreach (var card in CardSessionUnion)
        {
            CardsInSession.Add(card.Card, card.CardQuantity);
        }

    }

    // private async void DoubleClickFunction(string cardURL){
    //     //TODO: Change this to do something like show alternate versions of a card in the session

    //     //this goes on the card -------------> @ondblclick="() => DoubleClickFunction(card.Key.CardURL)"
    //     IsSingleClick = false; // Cancel single-click behavior
    //     LastAction = "Double Click";
    //     await JS.InvokeVoidAsync("open", cardURL, "_blank");
    // }
}